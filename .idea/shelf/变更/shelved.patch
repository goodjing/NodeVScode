Index: python_study/code/01.Base/05-成绩转为等级制.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E\r\nscore = float(input('请输入成绩: '))\r\nif score >= 90:\r\n    grade = 'A'\r\nelif score >= 80:\r\n    grade = 'B'\r\nelif score >= 70:\r\n    grade = 'C'\r\nelif score >= 60:\r\n    grade = 'D'\r\nelse:\r\n    grade = 'E'\r\nprint('成绩对应的等级是:', grade)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python_study/code/01.Base/05-成绩转为等级制.py b/python_study/code/01.Base/05-成绩转为等级制.py
--- a/python_study/code/01.Base/05-成绩转为等级制.py	(revision 4139ef5291b48b8a0ad1b991843d1ad47b371f00)
+++ b/python_study/code/01.Base/05-成绩转为等级制.py	(date 1669863269528)
@@ -10,4 +10,4 @@
     grade = 'D'
 else:
     grade = 'E'
-print('成绩对应的等级是:', grade)
\ No newline at end of file
+print('成绩对应的等级是:', grade)
Index: python_study/code/01.Base/06-三角形周长和面积.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python_study/code/01.Base/06-三角形周长和面积.py b/python_study/code/01.Base/06-三角形周长和面积.py
new file mode 100644
--- /dev/null	(date 1669863352620)
+++ b/python_study/code/01.Base/06-三角形周长和面积.py	(date 1669863352620)
@@ -0,0 +1,11 @@
+### 输入三条边长，能构成三角形则计算周长和面积
+a = float(input('a = '))
+b = float(input('b = '))
+c = float(input('c = '))
+if a + b > c and a + c > b and b + c > a:
+    print('周长: %f' % (a + b + c))
+    p = (a + b + c) / 2
+    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5
+    print('面积: %f' % area)
+else:
+    print('不能构成三角形')
Index: python_study/01.基础语法-案例.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>### 输入三条边长，能构成三角形则计算周长和面积\r\n```python\r\na = float(input('a = '))\r\nb = float(input('b = '))\r\nc = float(input('c = '))\r\nif a + b > c and a + c > b and b + c > a:\r\n    print('周长: %f' % (a + b + c))\r\n    p = (a + b + c) / 2\r\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\r\n    print('面积: %f' % (area))\r\nelse:\r\n    print('不能构成三角形')\r\n```\r\n\r\n### 输入一个正整数判断是不是素数\r\n> 素数指的是只能被1和自身整除的大于1的整数。\r\n```python\r\nfrom math import sqrt\r\n\r\nnum = int(input('请输入一个正整数: '))\r\nend = int(sqrt(num))\r\nis_prime = True\r\nfor x in range(2, end + 1):\r\n    if num % x == 0:\r\n        is_prime = False\r\n        break\r\nif is_prime and num != 1:\r\n    print('%d是素数' % num)\r\nelse:\r\n    print('%d不是素数' % num)\r\n```\r\n\r\n### 输入两个正整数，计算最大公约数和最小公倍数\r\n```python\r\nx = int(input('x = '))\r\ny = int(input('y = '))\r\n# 如果x大于y就交换x和y的值\r\nif x > y:\r\n    # 通过下面的操作将y的值赋给x, 将x的值赋给y\r\n    x, y = y, x\r\n# 从两个数中较小的数开始做递减的循环\r\nfor factor in range(x, 0, -1):\r\n    if x % factor == 0 and y % factor == 0:\r\n        print('%d和%d的最大公约数是%d' % (x, y, factor))\r\n        print('%d和%d的最小公倍数是%d' % (x, y, x * y // factor))\r\n        break\r\n```\r\n\r\n### 寻找水仙花数\r\n> 数字每个位上数字的立方之和正好等于它本身，例如：1^3 + 5^3+ 3^3=153。\r\n\r\n```python\r\nfor num in range(100, 1000):\r\n    low = num % 10\r\n    mid = num // 10 % 10\r\n    high = num // 100\r\n    if num == low ** 3 + mid ** 3 + high ** 3:\r\n        print(num)\r\n```\r\n\r\n### 百钱百鸡\r\n> 鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？\r\n\r\n```python\r\nfor x in range(0, 20):\r\n    for y in range(0, 33):\r\n        z = 100 - x - y\r\n        if 5 * x + 3 * y + z / 3 == 100:\r\n            print('公鸡: %d只, 母鸡: %d只, 小鸡: %d只' % (x, y, z))\r\n```\r\n\r\n### CRAPS赌博游戏\r\n> 玩家第一次摇骰子如果摇出了7点或11点，玩家胜\r\n> 玩家第一次如果摇出2点、3点或12点，庄家胜\r\n> 其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜\r\n> 如果玩家摇出了第一次摇的点数，玩家胜\r\n> 其他点数，玩家继续要骰子，直到分出胜负\r\n```python\r\nfrom random import randint\r\n\r\nmoney = 1000\r\nwhile money > 0:\r\n    print('你的总资产为:', money)\r\n    needs_go_on = False\r\n    while True:\r\n        debt = int(input('请下注: '))\r\n        if 0 < debt <= money:\r\n            break\r\n    first = randint(1, 6) + randint(1, 6)\r\n    print('玩家摇出了%d点' % first)\r\n    if first == 7 or first == 11:\r\n        print('玩家胜!')\r\n        money += debt\r\n    elif first == 2 or first == 3 or first == 12:\r\n        print('庄家胜!')\r\n        money -= debt\r\n    else:\r\n        needs_go_on = True\r\n    while needs_go_on:\r\n        needs_go_on = False\r\n        current = randint(1, 6) + randint(1, 6)\r\n        print('玩家摇出了%d点' % current)\r\n        if current == 7:\r\n            print('庄家胜')\r\n            money -= debt\r\n        elif current == first:\r\n            print('玩家胜')\r\n            money += debt\r\n        else:\r\n            needs_go_on = True\r\nprint('你破产了, 游戏结束!')\r\n```\r\n\r\n### 实现计算最大公约数和最小公倍数函数\r\n```python\r\ndef gcd(x, y):\r\n    \"\"\"求最大公约数\"\"\"\r\n    (x, y) = (y, x) if x > y else (x, y)\r\n    for factor in range(x, 0, -1):\r\n        if x % factor == 0 and y % factor == 0:\r\n            return factor\r\n\r\n\r\ndef lcm(x, y):\r\n    \"\"\"求最小公倍数\"\"\"\r\n    return x * y // gcd(x, y)\r\n```\r\n\r\n### 实现判断一个数是不是回文数的函数\r\n```python\r\ndef is_palindrome(num):\r\n    \"\"\"判断一个数是不是回文数\"\"\"\r\n    temp = num\r\n    total = 0\r\n    while temp > 0:\r\n        total = total * 10 + temp % 10\r\n        temp //= 10\r\n    return total == num\r\n```\r\n\r\n### 实现判断一个数是不是素数的函数\r\n```python\r\ndef is_prime(num):\r\n    \"\"\"判断一个数是不是素数\"\"\"\r\n    for factor in range(2, int(num ** 0.5) + 1):\r\n        if num % factor == 0:\r\n            return False\r\n    return True if num != 1 else False\r\n```\r\n\r\n### 定义一个类描述数字时钟\r\n```python\r\nfrom time import sleep\r\n\r\nclass Clock(object):\r\n    \"\"\"数字时钟\"\"\"\r\n\r\n    def __init__(self, hour=0, minute=0, second=0):\r\n        \"\"\"初始化方法\r\n\r\n        :param hour: 时\r\n        :param minute: 分\r\n        :param second: 秒\r\n        \"\"\"\r\n        self._hour = hour\r\n        self._minute = minute\r\n        self._second = second\r\n\r\n    def run(self):\r\n        \"\"\"走字\"\"\"\r\n        self._second += 1\r\n        if self._second == 60:\r\n            self._second = 0\r\n            self._minute += 1\r\n            if self._minute == 60:\r\n                self._minute = 0\r\n                self._hour += 1\r\n                if self._hour == 24:\r\n                    self._hour = 0\r\n\r\n    def show(self):\r\n        \"\"\"显示时间\"\"\"\r\n        return '%02d:%02d:%02d' % \\\r\n               (self._hour, self._minute, self._second)\r\n\r\n\r\ndef main():\r\n    clock = Clock(23, 59, 58)\r\n    while True:\r\n        print(clock.show())\r\n        sleep(1)\r\n        clock.run()\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n### 定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法\r\n```python\r\nfrom math import sqrt\r\n\r\nclass Point(object):\r\n\r\n    def __init__(self, x=0, y=0):\r\n        \"\"\"初始化方法\r\n        \r\n        :param x: 横坐标\r\n        :param y: 纵坐标\r\n        \"\"\"\r\n        self.x = x\r\n        self.y = y\r\n\r\n    def move_to(self, x, y):\r\n        \"\"\"移动到指定位置\r\n        \r\n        :param x: 新的横坐标\r\n        \"param y: 新的纵坐标\r\n        \"\"\"\r\n        self.x = x\r\n        self.y = y\r\n\r\n    def move_by(self, dx, dy):\r\n        \"\"\"移动指定的增量\r\n        \r\n        :param dx: 横坐标的增量\r\n        \"param dy: 纵坐标的增量\r\n        \"\"\"\r\n        self.x += dx\r\n        self.y += dy\r\n\r\n    def distance_to(self, other):\r\n        \"\"\"计算与另一个点的距离\r\n        \r\n        :param other: 另一个点\r\n        \"\"\"\r\n        dx = self.x - other.x\r\n        dy = self.y - other.y\r\n        return sqrt(dx ** 2 + dy ** 2)\r\n\r\n    def __str__(self):\r\n        return '(%s, %s)' % (str(self.x), str(self.y))\r\n\r\n\r\ndef main():\r\n    p1 = Point(3, 5)\r\n    p2 = Point()\r\n    print(p1)\r\n    print(p2)\r\n    p2.move_by(-1, 2)\r\n    print(p2)\r\n    print(p1.distance_to(p2))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n### 奥特曼打小怪兽\r\n```python\r\nfrom abc import ABCMeta, abstractmethod\r\nfrom random import randint, randrange\r\n\r\n\r\nclass Fighter(object, metaclass=ABCMeta):\r\n    \"\"\"战斗者\"\"\"\r\n\r\n    # 通过__slots__魔法限定对象可以绑定的成员变量\r\n    __slots__ = ('_name', '_hp')\r\n\r\n    def __init__(self, name, hp):\r\n        \"\"\"初始化方法\r\n\r\n        :param name: 名字\r\n        :param hp: 生命值\r\n        \"\"\"\r\n        self._name = name\r\n        self._hp = hp\r\n\r\n    @property\r\n    def name(self):\r\n        return self._name\r\n\r\n    @property\r\n    def hp(self):\r\n        return self._hp\r\n\r\n    @hp.setter\r\n    def hp(self, hp):\r\n        self._hp = hp if hp >= 0 else 0\r\n\r\n    @property\r\n    def alive(self):\r\n        return self._hp > 0\r\n\r\n    @abstractmethod\r\n    def attack(self, other):\r\n        \"\"\"攻击\r\n\r\n        :param other: 被攻击的对象\r\n        \"\"\"\r\n        pass\r\n\r\n\r\nclass Ultraman(Fighter):\r\n    \"\"\"奥特曼\"\"\"\r\n\r\n    __slots__ = ('_name', '_hp', '_mp')\r\n\r\n    def __init__(self, name, hp, mp):\r\n        \"\"\"初始化方法\r\n\r\n        :param name: 名字\r\n        :param hp: 生命值\r\n        :param mp: 魔法值\r\n        \"\"\"\r\n        super().__init__(name, hp)\r\n        self._mp = mp\r\n\r\n    def attack(self, other):\r\n        other.hp -= randint(15, 25)\r\n\r\n    def huge_attack(self, other):\r\n        \"\"\"究极必杀技(打掉对方至少50点或四分之三的血)\r\n\r\n        :param other: 被攻击的对象\r\n\r\n        :return: 使用成功返回True否则返回False\r\n        \"\"\"\r\n        if self._mp >= 50:\r\n            self._mp -= 50\r\n            injury = other.hp * 3 // 4\r\n            injury = injury if injury >= 50 else 50\r\n            other.hp -= injury\r\n            return True\r\n        else:\r\n            self.attack(other)\r\n            return False\r\n\r\n    def magic_attack(self, others):\r\n        \"\"\"魔法攻击\r\n\r\n        :param others: 被攻击的群体\r\n\r\n        :return: 使用魔法成功返回True否则返回False\r\n        \"\"\"\r\n        if self._mp >= 20:\r\n            self._mp -= 20\r\n            for temp in others:\r\n                if temp.alive:\r\n                    temp.hp -= randint(10, 15)\r\n            return True\r\n        else:\r\n            return False\r\n\r\n    def resume(self):\r\n        \"\"\"恢复魔法值\"\"\"\r\n        incr_point = randint(1, 10)\r\n        self._mp += incr_point\r\n        return incr_point\r\n\r\n    def __str__(self):\r\n        return '~~~%s奥特曼~~~\\n' % self._name + \\\r\n            '生命值: %d\\n' % self._hp + \\\r\n            '魔法值: %d\\n' % self._mp\r\n\r\n\r\nclass Monster(Fighter):\r\n    \"\"\"小怪兽\"\"\"\r\n\r\n    __slots__ = ('_name', '_hp')\r\n\r\n    def attack(self, other):\r\n        other.hp -= randint(10, 20)\r\n\r\n    def __str__(self):\r\n        return '~~~%s小怪兽~~~\\n' % self._name + \\\r\n            '生命值: %d\\n' % self._hp\r\n\r\n\r\ndef is_any_alive(monsters):\r\n    \"\"\"判断有没有小怪兽是活着的\"\"\"\r\n    for monster in monsters:\r\n        if monster.alive > 0:\r\n            return True\r\n    return False\r\n\r\n\r\ndef select_alive_one(monsters):\r\n    \"\"\"选中一只活着的小怪兽\"\"\"\r\n    monsters_len = len(monsters)\r\n    while True:\r\n        index = randrange(monsters_len)\r\n        monster = monsters[index]\r\n        if monster.alive > 0:\r\n            return monster\r\n\r\n\r\ndef display_info(ultraman, monsters):\r\n    \"\"\"显示奥特曼和小怪兽的信息\"\"\"\r\n    print(ultraman)\r\n    for monster in monsters:\r\n        print(monster, end='')\r\n\r\n\r\ndef main():\r\n    u = Ultraman('骆昊', 1000, 120)\r\n    m1 = Monster('狄仁杰', 250)\r\n    m2 = Monster('白元芳', 500)\r\n    m3 = Monster('王大锤', 750)\r\n    ms = [m1, m2, m3]\r\n    fight_round = 1\r\n    while u.alive and is_any_alive(ms):\r\n        print('========第%02d回合========' % fight_round)\r\n        m = select_alive_one(ms)  # 选中一只小怪兽\r\n        skill = randint(1, 10)   # 通过随机数选择使用哪种技能\r\n        if skill <= 6:  # 60%的概率使用普通攻击\r\n            print('%s使用普通攻击打了%s.' % (u.name, m.name))\r\n            u.attack(m)\r\n            print('%s的魔法值恢复了%d点.' % (u.name, u.resume()))\r\n        elif skill <= 9:  # 30%的概率使用魔法攻击(可能因魔法值不足而失败)\r\n            if u.magic_attack(ms):\r\n                print('%s使用了魔法攻击.' % u.name)\r\n            else:\r\n                print('%s使用魔法失败.' % u.name)\r\n        else:  # 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击)\r\n            if u.huge_attack(m):\r\n                print('%s使用究极必杀技虐了%s.' % (u.name, m.name))\r\n            else:\r\n                print('%s使用普通攻击打了%s.' % (u.name, m.name))\r\n                print('%s的魔法值恢复了%d点.' % (u.name, u.resume()))\r\n        if m.alive > 0:  # 如果选中的小怪兽没有死就回击奥特曼\r\n            print('%s回击了%s.' % (m.name, u.name))\r\n            m.attack(u)\r\n        display_info(u, ms)  # 每个回合结束后显示奥特曼和小怪兽的信息\r\n        fight_round += 1\r\n    print('\\n========战斗结束!========\\n')\r\n    if u.alive > 0:\r\n        print('%s奥特曼胜利!' % u.name)\r\n    else:\r\n        print('小怪兽胜利!')\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n### 工资结算系统\r\n```python\r\n\"\"\"\r\n某公司有三种类型的员工 分别是部门经理、程序员和销售员\r\n需要设计一个工资结算系统 根据提供的员工信息来计算月薪\r\n部门经理的月薪是每月固定15000元\r\n程序员的月薪按本月工作时间计算 每小时150元\r\n销售员的月薪是1200元的底薪加上销售额5%的提成\r\n\"\"\"\r\nfrom abc import ABCMeta, abstractmethod\r\n\r\n\r\nclass Employee(object, metaclass=ABCMeta):\r\n    \"\"\"员工\"\"\"\r\n\r\n    def __init__(self, name):\r\n        \"\"\"\r\n        初始化方法\r\n\r\n        :param name: 姓名\r\n        \"\"\"\r\n        self._name = name\r\n\r\n    @property\r\n    def name(self):\r\n        return self._name\r\n\r\n    @abstractmethod\r\n    def get_salary(self):\r\n        \"\"\"\r\n        获得月薪\r\n\r\n        :return: 月薪\r\n        \"\"\"\r\n        pass\r\n\r\n\r\nclass Manager(Employee):\r\n    \"\"\"部门经理\"\"\"\r\n\r\n    def get_salary(self):\r\n        return 15000.0\r\n\r\n\r\nclass Programmer(Employee):\r\n    \"\"\"程序员\"\"\"\r\n\r\n    def __init__(self, name, working_hour=0):\r\n        super().__init__(name)\r\n        self._working_hour = working_hour\r\n\r\n    @property\r\n    def working_hour(self):\r\n        return self._working_hour\r\n\r\n    @working_hour.setter\r\n    def working_hour(self, working_hour):\r\n        self._working_hour = working_hour if working_hour > 0 else 0\r\n\r\n    def get_salary(self):\r\n        return 150.0 * self._working_hour\r\n\r\n\r\nclass Salesman(Employee):\r\n    \"\"\"销售员\"\"\"\r\n\r\n    def __init__(self, name, sales=0):\r\n        super().__init__(name)\r\n        self._sales = sales\r\n\r\n    @property\r\n    def sales(self):\r\n        return self._sales\r\n\r\n    @sales.setter\r\n    def sales(self, sales):\r\n        self._sales = sales if sales > 0 else 0\r\n\r\n    def get_salary(self):\r\n        return 1200.0 + self._sales * 0.05\r\n\r\n\r\ndef main():\r\n    emps = [\r\n        Manager('刘备'), Programmer('诸葛亮'),\r\n        Manager('曹操'), Salesman('荀彧'),\r\n        Salesman('吕布'), Programmer('张辽'),\r\n        Programmer('赵云')\r\n    ]\r\n    for emp in emps:\r\n        if isinstance(emp, Programmer):\r\n            emp.working_hour = int(input('请输入%s本月工作时间: ' % emp.name))\r\n        elif isinstance(emp, Salesman):\r\n            emp.sales = float(input('请输入%s本月销售额: ' % emp.name))\r\n        # 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态)\r\n        print('%s本月工资为: ￥%s元' %\r\n              (emp.name, emp.get_salary()))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python_study/01.基础语法-案例.md b/python_study/01.基础语法-案例.md
--- a/python_study/01.基础语法-案例.md	(revision 4139ef5291b48b8a0ad1b991843d1ad47b371f00)
+++ b/python_study/01.基础语法-案例.md	(date 1669863352631)
@@ -1,16 +1,4 @@
-### 输入三条边长，能构成三角形则计算周长和面积
-```python
-a = float(input('a = '))
-b = float(input('b = '))
-c = float(input('c = '))
-if a + b > c and a + c > b and b + c > a:
-    print('周长: %f' % (a + b + c))
-    p = (a + b + c) / 2
-    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5
-    print('面积: %f' % (area))
-else:
-    print('不能构成三角形')
-```
+
 
 ### 输入一个正整数判断是不是素数
 > 素数指的是只能被1和自身整除的大于1的整数。
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4faab923-39af-4e37-9c12-b976936e96bf\" name=\"变更\" comment=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;python_study/01.基础语法-案例.md\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/python_study/01.基础语法-案例.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/python_study/01.基础语法-案例.md\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/python_study/code/01.base/05-成绩转为等级制.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/python_study/code/01.base/05-成绩转为等级制.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/python_study/code/01.base/02-圆的周长和面积.py\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2I9jR060GMYa7OtRDr1ZX1Xyi6l\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;\n  }\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"应用程序级\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"4faab923-39af-4e37-9c12-b976936e96bf\" name=\"变更\" comment=\"\" />\r\n      <created>1669600685163</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1669600685163</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;python_study/01.基础语法-案例.md\">\r\n      <created>1669862671047</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669862671047</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"origin/master\" />\r\n                </option>\r\n              </RecentGroup>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"master\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;python_study/01.基础语法-案例.md\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;python_study/01.基础语法-案例.md\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4139ef5291b48b8a0ad1b991843d1ad47b371f00)
+++ b/.idea/workspace.xml	(date 1669863300674)
@@ -4,7 +4,6 @@
     <list default="true" id="4faab923-39af-4e37-9c12-b976936e96bf" name="变更" comment="Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;python_study/01.基础语法-案例.md">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/python_study/01.基础语法-案例.md" beforeDir="false" afterPath="$PROJECT_DIR$/python_study/01.基础语法-案例.md" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/python_study/code/01.base/05-成绩转为等级制.py" beforeDir="false" afterPath="$PROJECT_DIR$/python_study/code/01.base/05-成绩转为等级制.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -54,7 +53,14 @@
       <option name="project" value="LOCAL" />
       <updated>1669862671047</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;python_study/01.基础语法-案例.md">
+      <created>1669862952753</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1669862952753</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
